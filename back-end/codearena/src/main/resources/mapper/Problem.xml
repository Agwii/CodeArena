<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ssafy.codearena.problem.mapper.ProblemMapper">
    <resultMap id="problemWithSearchDto" type="problemWithSearchDto">
        <result property="problemId" column="problem_id"/>
        <result property="userNickname" column="user_nickname"/>
        <result property="problemTitle" column="problem_title"/>
        <result property="problemRating" column="problem_rating"/>
        <result property="submitCount" column="submit_count"/>
        <result property="acceptCount" column="accept_count"/>
        <result property="percentage" column="percentage"/>
    </resultMap>

    <resultMap id="problemForInsertDto" type="problemForInsertDto">
        <result property="userId" column="user_id"/>
        <result property="problemId" column="problem_id"/>
        <result property="problemTitle" column="problem_title"/>
        <result property="problemContent" column="problem_content"/>
        <result property="problemInputDesc" column="problem_input_desc"/>
        <result property="problemOutputDesc" column="problem_output_desc"/>
        <result property="problemValidationCode" column="problem_validation_code"/>
        <result property="problemValidationLang" column="problem_validation_lang"/>
        <result property="problemExInput" column="problem_ex_input"/>
        <result property="problemExOutput" column="problem_ex_output"/>
        <result property="problemTime" column="problem_time"/>
        <result property="problemMem" column="problem_mem"/>
        <result property="problemRating" column="problem_rating"/>
    </resultMap>

    <resultMap id="TCListDto" type="tCListDto">
        <result property="problemId" column="problem_id"/>
        <collection column="problemId = problem_id" property="testCase" javaType="List" ofType="..TestCaseDto" select="selectTestCase"></collection>
    </resultMap>

    <sql id='cate'>
        <choose>
            <when test=' word!=null and !"".equals(word)'>
                <choose>
                    <when test=' cate.equals("problem_id") '>
                        and p.problem_id = ${word}
                    </when>
                    <otherwise>
                        and ${cate} like concat('%','${word}','%')
                    </otherwise>
                </choose>
            </when>
        </choose>

    </sql>
    <select id="selectTestCase">
        select tid, input, output from ps_testcase where problem_id = ${problemId}
    </select>

    <select id="problemCount" parameterType="hashmap" resultType="int">
        select count(problem_id) from ps_list as p
        where 1=1
        <include refid="cate"></include>
    </select>


    <sql id="orderby">
        <if test='orderBy!=null and !"".equals(orderBy)'>
            order by '${orderBy}' desc
        </if>
    </sql>
    <select id="selectProblemList" parameterType="hashmap" resultMap="problemWithSearchDto">
        select
            p.problem_id, p.problem_title, p.problem_rating, ifnull(inline.submit_count, 0) as submit_count, ifnull(inline2.accept_count, 0) as accept_count, u.user_nickname,
            ifnull(round((inline2.accept_count/inline.submit_count * 100),2), 0) AS percentage
        from ps_list as p
                 left join (select problem_id, count(distinct user_id) as submit_count from ps_submit group by problem_id) as inline
                           on p.problem_id = inline.problem_id
                 left join (select problem_id, count(distinct user_id) as accept_count from ps_submit where submit_status like '%맞았습니다.%' group by problem_id) as inline2
                           on p.problem_id = inline2.problem_id
                 left join `user` as u
                           on p.user_id = u.user_id
        where 1=1 and p.problem_visibility = 1
        <include refid="cate"></include>
        <include refid="orderby"></include>
        limit ${start}, ${offset}
    </select>
    <!-- problem_id, user_id, problem_title, problem_content, problem_rating, problem_time, problem_mem, problem_ex_input, problem_ex_output, problem_input_desc, problem_output_desc, problem_validation_code, problem_validation_lang, problem_visibility, problem_date -->
    <insert id="insertProblem" parameterType="problemForInsertDto">
        insert into ps_list ( user_id, problem_title, problem_content, problem_time, problem_mem, problem_ex_input, problem_ex_output, problem_input_desc, problem_output_desc, problem_validation_code, problem_validation_lang )
        values (${userId}, '${problemTitle}', '${problemContent}', '${problemTime}', '${problemMem}','${problemExInput}', '${problemExOutput}', '${problemInputDesc}', '${problemOutputDesc}', '${problemValidationCode}', '${problemValidationLang}')
        <selectKey order="AFTER" keyProperty="problemId" resultType="java.lang.Integer">
            select last_insert_id();
        </selectKey>
    </insert>
    
    <insert id="insertTestCase" parameterType="tCListDto">
        insert into ps_testcase (problem_id, input, output)
        values
        <foreach collection="testCase" item="item" separator=",">
            ('${problemId}' ,'${item.input}', '${item.output}' )
        </foreach>
    </insert>

    <insert id="insertProblemTagList" parameterType="tagListDto">
        insert into ps_problem_tag (problem_id, tag_name) values
        <foreach collection="tagList" item="item" separator=",">
            ('${problemId}', '${item.tagName}')
        </foreach>
    </insert>
</mapper>