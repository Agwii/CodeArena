<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ssafy.codearena.Chatting.mapper.RestMapper">

    <resultMap id="playerData" type="gamePlayerDto">
        <result property="userId" column="user_id"/>
        <result property="userNickname" column="user_nickname"/>
        <result property="effRating" column="effi_rating"/>
        <result property="speedRating" column="speed_rating"/>
    </resultMap>

    <resultMap id="playerAllData" type="gamePlayerDto">
        <result property="userId" column="user_id"/>
        <result property="userNickname" column="user_nickname"/>
        <result property="effRating" column="effi_rating"/>
        <result property="speedRating" column="speed_rating"/>
        <association property="record" column="userId=user_id" javaType="userRecordDto" select="selectUserRecord"/>
        <collection property="recentProblems" column="userId=user_id" ofType="ArenaProblemDto" select="selectUserRecentProblemNames"/>
        <collection property="recentUsers" column="userId=user_id" ofType="UserDto" select="selectRecentMatchingUsers"/>
    </resultMap>

    <resultMap id="userData" type="userDto">
        <result property="userId" column="user_id"/>
        <result property="userNickname" column="user_nickname"/>
    </resultMap>

    <resultMap id="playerRecord" type="userRecordDto">
        <result property="defeatCount" column="defeat_count"/>
        <result property="winCount" column="win_count"/>
        <result property="drawCount" column="draw_count"/>
    </resultMap>

    <resultMap id="myArenaProblem" type="arenaProblemDto">
        <result property="problemId" column="problem_id"/>
        <result property="problemTitle" column="problem_title"/>
    </resultMap>

    <resultMap id="gameRecords" type="gameRecordDto">
        <result property="gameId" column="game_id"/>
        <result property="problemTitle" column="problem_title"/>
        <result property="player1" column="player1"/>
        <result property="player2" column="player2"/>
        <result property="player3" column="player3"/>
        <result property="player4" column="player4"/>
        <result property="gameMode" column="game_mode"/>
        <result property="winner" column="winner"/>
        <result property="roomType" column="room_type"/>
    </resultMap>

    <insert id="insertSubmit" parameterType="submitDto">
        insert into
            arena_submit_status
        (user_id, game_id, problem_id, submit_lang, code, submit_status)
        values(
            '${userId}', '${gameId}', '${problemId}', '${submitLang}', #{code}, '${submitStatus}'
        )
        <selectKey keyProperty="submitNo" resultType="String" order="AFTER">
            select last_insert_id()
        </selectKey>
    </insert>

    <select id="getEffRankingbyRating" resultMap="playerData">
        select user_id, user_nickname, effi_rating from user where user_id != 1 order by effi_rating desc, user_id asc limit 0, 5;
    </select>

    <select id="getSpeedRankingByRating" resultMap="playerData">
        select user_id, user_nickname, speed_rating from user where user_id != 1 order by speed_rating desc, user_id asc limit 0, 5;
    </select>

    <select id="getUserRecordByUserId" resultMap="playerAllData" parameterType="String">
        select user_id, user_nickname, effi_rating, speed_rating from user where user_id=${userId}
    </select>

    <select id="selectUserRecord" resultMap="playerRecord">
        SELECT (SELECT count(*) from arena_record where (player1=${userId} or player2=${userId} or player3=${userId} or player4=${userId}) and winner!=${userId} and end_time is not null) as defeat_count,
            (SELECT count(*)FROM arena_record WHERE winner = ${userId} and end_time is not null) as win_count,
        (SELECT count(*) from arena_record where (player1=${userId} or player2=${userId} or player3=${userId} or player4=${userId}) and winner IS NULL and end_time is not null) as draw_count FROM arena_record LIMIT 1;
    </select>

    <select id="selectUserRecentProblemNames" resultMap="myArenaProblem">
        select a.problem_id, p.problem_title from arena_record a inner join ps_list p on a.problem_id=p.problem_id where (player1=${userId} or player2=${userId} or player3=${userId} or player4=${userId}) and end_time is not null order by a.start_time desc limit 0, 6;
    </select>

    <select id="selectRecentMatchingUsers" resultMap="userData">
        select distinct temp.user_id, u.user_nickname from (
           select * from(select player1 as user_id, start_time
                         from arena_record
                         where
                             (player2 = ${userId} or player3 = ${userId} or player4 = ${userId}) and
                             end_time is not null and player1 is not null
                         order by start_time desc) temp1
           UNION
           select * from(select player2 as user_id, start_time
                         from arena_record
                         where
                             (player1 = ${userId} or player3 = ${userId} or player4 = ${userId}) and
                             end_time is not null and player2 is not null
                         order by start_time desc
                             limit 5) temp2
           UNION
           select * from(select player3 as user_id, start_time
                         from arena_record
                         where
                             (player1 = ${userId} or player2 = ${userId} or player4 = ${userId}) and
                             end_time is not null and player3 is not null
                         order by start_time desc
                             limit 5) temp3
           UNION
           select * from(select player4 as user_id, start_time
                         from arena_record
                         where
                             (player1 = ${userId} or player2 = ${userId} or player3 = ${userId}) and
                             end_time is not null and player4 is not null
                         order by start_time desc
                             limit 5) temp4
           order by start_time desc) temp inner join user u on temp.user_id = u.user_id;
    </select>

    <select id="getRecordsByUserId" resultMap="gameRecords" parameterType="String">
        select game_id, problem_title, (select user_nickname as player1 from user where player1=user_id) as player1,
               (select user_nickname as player2 from user where player2=user_id) as player2,
               (select user_nickname as player3 from user where player3=user_id) as player3,
               (select user_nickname as player4 from user where player4=user_id) as player4,
               game_mode,
               (select user_nickname as winner from user where winner=user_id) as winner
                , room_type from arena_record a inner join ps_list p on a.problem_id = p.problem_id
        where (player1=${userId} or player2=${userId} or player3=${userId} or player4 =${userId}) and end_time is not null order by start_time desc limit 0, 5;
    </select>
</mapper>